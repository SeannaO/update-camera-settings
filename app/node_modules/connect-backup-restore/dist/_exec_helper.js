'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

exports.execAsync = execAsync;
exports.execCheckAsync = execCheckAsync;

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _child_process = require('child_process');

var child_process = _interopRequireWildcard(_child_process);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function execAsync(file, args, options, verbose) {
  var child = child_process.execFile(file, args, options);

  if (verbose) {
    child.stdout.on('data', function (data) {
      return console.log('stdout: ' + data);
    });
    child.stderr.on('data', function (data) {
      return console.log('stderr: ' + data);
    });
  }

  return new _bluebird2.default(function (resolve, reject) {
    child.on('exit', function (code, signal) {
      return resolve([code, signal]);
    });
    child.on("error", reject);
  });
}

function execCheckAsync(file, args, options, verbose) {
  return execAsync(file, args, options, verbose).then(function (_ref) {
    var _ref2 = _slicedToArray(_ref, 2);

    var code = _ref2[0];
    var signal = _ref2[1];
    return code === 0 ? _bluebird2.default.resolve() : _bluebird2.default.reject(new Error(file + ' exited with ' + (code ? 'code ' + code : 'signal ' + signal)));
  });
}
//# sourceMappingURL=_exec_helper.js.map