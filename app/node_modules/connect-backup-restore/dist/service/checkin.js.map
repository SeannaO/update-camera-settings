{"version":3,"sources":["../../src/service/checkin.js"],"names":[],"mappings":";;;;;;;;;;;AAAA;;IAAY,I;;AAEZ;;;;AAEA;;;;AAGA;;;;;;;;AAFA,IAAM,KAAK,mBAAQ,YAAR,CAAqB,QAAQ,UAAR,CAArB,CAAX;;;;;;;;;;AAYO,IAAM,wBAAQ,qCAAqC,KAArC,CAA2C,GAA3C,CAAd;AACA,IAAM,kCAAa,mCAAmC,KAAnC,CAAyC,GAAzC,CAAnB;;;;;;;;;2BAGS,M,EAAQ,S,EAAW;AAC/B,UAAI,QAAQ,KAAK,IAAL,CAAU,SAAV,EAAqB,IAArB,CAAZ;AACA,aAAO,GAAG,WAAH,CAAe,KAAf,EACN,IADM,CACD;AAAA,eAAK,mBAAQ,GAAR,CAAY,MAAM,GAAN,CAAU;AAAA,iBAAK,uBAAU,KAAK,IAAL,CAAU,MAAV,EAAkB,IAAlB,EAAwB,CAAxB,CAAV,EAAsC,KAAK,IAAL,CAAU,KAAV,EAAiB,CAAjB,CAAtC,CAAL;AAAA,SAAV,CAAZ,CAAL;AAAA,OADC;;AAAA,OAGN,IAHM,CAGD;AAAA,eAAK,uBAAU,KAAK,IAAL,CAAU,MAAV,EAAkB,IAAlB,EAAwB,mBAAxB,CAAV,EAAwD,KAAK,IAAL,CAAU,KAAV,EAAiB,mBAAjB,CAAxD,CAAL;AAAA,OAHC,CAAP;AAID;;;4BAEc,M,EAAQ;AACrB,aAAO,4BAAe,MAAf,EAAuB,qBAAa;AACzC,YAAI,QAAQ,KAAK,IAAL,CAAU,MAAV,EAAkB,IAAlB,CAAZ;AACA,eAAO,GAAG,WAAH,CAAe,KAAf,EACN,IADM,CACD;AAAA,iBAAK,mBAAQ,GAAR,CAAY,MAAM,GAAN,CAAU;AAAA,mBAAK,4BAAe,KAAK,IAAL,CAAU,SAAV,EAAqB,IAArB,EAA2B,CAA3B,CAAf,EAA8C,KAAK,IAAL,CAAU,KAAV,EAAiB,CAAjB,CAA9C,CAAL;AAAA,WAAV,CAAZ,CAAL;AAAA,SADC,EAEN,IAFM,CAED,aAAK;AACT,cAAI,UAAU,KAAK,IAAL,CAAU,KAAV,EAAiB,mBAAjB,CAAd;AACA,iBAAO,mBAAQ,GAAR,CAAY,CAAC,GAAG,aAAH,CAAiB,KAAK,IAAL,CAAU,SAAV,EAAqB,IAArB,EAA2B,mBAA3B,CAAjB,CAAD,EAAoE,GAAG,aAAH,CAAiB,OAAjB,CAApE,CAAZ,EACN,IADM,CACD,gBAAwB;AAAA;;AAAA,gBAAtB,OAAsB;AAAA,gBAAb,OAAa;;AAC5B,6BAAE,MAAF,CAAS,OAAT,EAAkB,iBAAE,IAAF,CAAO,OAAP,EAAgB,UAAhB,CAAlB;AACA,mBAAO,GAAG,cAAH,CAAkB,OAAlB,EAA2B,OAA3B,CAAP;AACD,WAJM,CAAP;AAKD,SATM,CAAP;AAUD,OAZM,CAAP;AAaD","file":"checkin.js","sourcesContent":["import * as path from 'path'\n\nimport _ from 'lodash'\n\nimport Promise from 'bluebird'\nconst fs = Promise.promisifyAll(require('fs-extra'))\n\nimport { copyAsync, restoreWrapper, overwriteAsync } from './_common'\n\n/*\n[DIR] SolinkConnect/data/checkin\n  [DIR] db\n    [FILES] Associations.json CheckinData.json\n    [DATA] Registration.json\n        [FIELDS] name address location externalId\n*/\n\nexport const FILES = 'Associations.json CheckinData.json'.split(' ');\nexport const REG_FIELDS = 'name address location externalId'.split(' ');\n\nexport default class {\n  static backup(srcDir, backupDir) {\n    let dbDir = path.join(backupDir, 'db');\n    return fs.mkdirsAsync(dbDir)\n    .then(x => Promise.all(FILES.map(f => copyAsync(path.join(srcDir, 'db', f), path.join(dbDir, f)))))\n    // backup the full Registration.json, cherry picking fields is done at restore time\n    .then(x => copyAsync(path.join(srcDir, 'db', 'Registration.json'), path.join(dbDir, 'Registration.json')));\n  }\n  \n  static restore(cfgDir) {\n    return restoreWrapper(cfgDir, backupDir => {\n      let dbDir = path.join(cfgDir, 'db');\n      return fs.mkdirsAsync(dbDir)\n      .then(x => Promise.all(FILES.map(f => overwriteAsync(path.join(backupDir, 'db', f), path.join(dbDir, f)))))\n      .then(x => {\n        let regFile = path.join(dbDir, 'Registration.json');\n        return Promise.all([fs.readJsonAsync(path.join(backupDir, 'db', 'Registration.json')), fs.readJsonAsync(regFile)])\n        .then(([bkupReg, currReg]) => {\n          _.assign(currReg, _.pick(bkupReg, REG_FIELDS));\n          return fs.writeJsonAsync(regFile, currReg);\n        }); \n      });\n    });\n  }\n}\n"]}