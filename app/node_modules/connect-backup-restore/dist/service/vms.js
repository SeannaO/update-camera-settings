'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FILES = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _path = require('path');

var path = _interopRequireWildcard(_path);

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _common = require('./_common');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/*
[DIR] SolinkConnect/data/vms
  [FILES] cam_db multiview.db
*/

var FILES = exports.FILES = 'cam_db multiview.db'.split(' ');

var _class = function () {
  function _class() {
    _classCallCheck(this, _class);
  }

  _createClass(_class, null, [{
    key: 'backup',
    value: function backup(srcDir, backupDir) {
      return _bluebird2.default.all(FILES.map(function (f) {
        return (0, _common.copyAsync)(path.join(srcDir, f), path.join(backupDir, f));
      }));
    }
  }, {
    key: 'restore',
    value: function restore(cfgDir) {
      return (0, _common.restoreWrapper)(cfgDir, function (backupDir) {
        return _bluebird2.default.all(FILES.map(function (f) {
          return (0, _common.overwriteAsync)(path.join(backupDir, f), path.join(cfgDir, f));
        }));
      });
    }
  }]);

  return _class;
}();

exports.default = _class;
//# sourceMappingURL=vms.js.map