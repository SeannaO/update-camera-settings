{"version":3,"sources":["../../src/service/listener.js"],"names":[],"mappings":";;;;;;;;;AAAA;;IAAY,I;;AAEZ;;;;AAGA;;;;;;;;AAFA,IAAM,KAAK,mBAAQ,YAAR,CAAqB,QAAQ,UAAR,CAArB,CAAX;;;;;;;;;AAWO,IAAM,wBAAQ,0BAA0B,KAA1B,CAAgC,GAAhC,CAAd;;;;;;;;;2BAGS,M,EAAQ,S,EAAW;AAC/B,UAAI,QAAQ,KAAK,IAAL,CAAU,SAAV,EAAqB,IAArB,CAAZ;AACA,aAAO,GAAG,WAAH,CAAe,KAAf,EACN,IADM,CACD;AAAA,eACJ,mBAAQ,GAAR,CACE,MAAM,GAAN,CAAU;AAAA,iBAAK,uBAAU,KAAK,IAAL,CAAU,MAAV,EAAkB,IAAlB,EAAwB,CAAxB,CAAV,EAAsC,KAAK,IAAL,CAAU,KAAV,EAAiB,CAAjB,CAAtC,CAAL;AAAA,SAAV,EACC,MADD,CACQ,uBAAU,KAAK,IAAL,CAAU,MAAV,EAAkB,SAAlB,CAAV,EAAwC,KAAK,IAAL,CAAU,SAAV,EAAqB,SAArB,CAAxC,CADR,CADF,CADI;AAAA,OADC,CAAP;AAOD;;;4BAEc,M,EAAQ;AACrB,aAAO,4BAAe,MAAf,EAAuB;AAAA,eAC5B,mBAAQ,GAAR,CAAY,CACV,4BAAe,KAAK,IAAL,CAAU,SAAV,EAAqB,IAArB,CAAf,EAA2C,KAAK,IAAL,CAAU,MAAV,EAAkB,IAAlB,CAA3C,CADU,EAEV,4BAAe,KAAK,IAAL,CAAU,SAAV,EAAqB,SAArB,CAAf,EAAgD,KAAK,IAAL,CAAU,MAAV,EAAkB,SAAlB,CAAhD,CAFU,CAAZ,CAD4B;AAAA,OAAvB,CAAP;AAMD","file":"listener.js","sourcesContent":["import * as path from 'path'\n\nimport Promise from 'bluebird'\nconst fs = Promise.promisifyAll(require('fs-extra'))\n\nimport { copyAsync, restoreWrapper, overwriteAsync } from './_common'\n\n/*\n[DIR] SolinkConnect/data/listener\n  [DIR] db\n    [FILES] instances.db scripts.db\n  [DIR] scripts\n*/\n\nexport const FILES = 'instances.db scripts.db'.split(' ');\n\nexport default class {\n  static backup(srcDir, backupDir) {\n    let dbDir = path.join(backupDir, 'db');\n    return fs.mkdirsAsync(dbDir)\n    .then(x => \n      Promise.all(\n        FILES.map(f => copyAsync(path.join(srcDir, 'db', f), path.join(dbDir, f)))\n        .concat(copyAsync(path.join(srcDir, 'scripts'), path.join(backupDir, 'scripts')))\n      )\n    );\n  }\n  \n  static restore(cfgDir) {\n    return restoreWrapper(cfgDir, backupDir =>\n      Promise.all([\n        overwriteAsync(path.join(backupDir, 'db'), path.join(cfgDir, 'db')),\n        overwriteAsync(path.join(backupDir, 'scripts'), path.join(cfgDir, 'scripts'))\n      ])\n    );\n  }\n}\n"]}