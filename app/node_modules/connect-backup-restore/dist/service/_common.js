'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.copyAsync = copyAsync;
exports.overwriteAsync = overwriteAsync;
exports.restoreWrapper = restoreWrapper;

var _path = require('path');

var path = _interopRequireWildcard(_path);

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var fs = _bluebird2.default.promisifyAll(require('fs-extra'));

function copyAsync(src, dst) {
  return fs.copyAsync(src, dst, { preserveTimestamps: true }).catch({ code: 'ENOENT' }, function (e) {
    return null;
  });
}

function overwriteAsync(src, dst) {
  return fs.moveAsync(src, dst, { clobber: true });
}

function restoreWrapper(cfgDir, func) {
  var backupDir = path.join(cfgDir, 'config.restore');
  return fs.statAsync(backupDir).then(function (x) {
    // TODO: backup the old config in the next iteration
    return func(backupDir).then(function (x) {
      return fs.removeAsync(backupDir);
    });
  }).catch({ code: 'ENOENT' }, function (e) {
    return null;
  });
}
//# sourceMappingURL=_common.js.map