'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.REG_FIELDS = exports.FILES = undefined;

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _path = require('path');

var path = _interopRequireWildcard(_path);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _common = require('./_common');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var fs = _bluebird2.default.promisifyAll(require('fs-extra'));

/*
[DIR] SolinkConnect/data/checkin
  [DIR] db
    [FILES] Associations.json CheckinData.json
    [DATA] Registration.json
        [FIELDS] name address location externalId
*/

var FILES = exports.FILES = 'Associations.json CheckinData.json'.split(' ');
var REG_FIELDS = exports.REG_FIELDS = 'name address location externalId'.split(' ');

var _class = function () {
  function _class() {
    _classCallCheck(this, _class);
  }

  _createClass(_class, null, [{
    key: 'backup',
    value: function backup(srcDir, backupDir) {
      var dbDir = path.join(backupDir, 'db');
      return fs.mkdirsAsync(dbDir).then(function (x) {
        return _bluebird2.default.all(FILES.map(function (f) {
          return (0, _common.copyAsync)(path.join(srcDir, 'db', f), path.join(dbDir, f));
        }));
      })
      // backup the full Registration.json, cherry picking fields is done at restore time
      .then(function (x) {
        return (0, _common.copyAsync)(path.join(srcDir, 'db', 'Registration.json'), path.join(dbDir, 'Registration.json'));
      });
    }
  }, {
    key: 'restore',
    value: function restore(cfgDir) {
      return (0, _common.restoreWrapper)(cfgDir, function (backupDir) {
        var dbDir = path.join(cfgDir, 'db');
        return fs.mkdirsAsync(dbDir).then(function (x) {
          return _bluebird2.default.all(FILES.map(function (f) {
            return (0, _common.overwriteAsync)(path.join(backupDir, 'db', f), path.join(dbDir, f));
          }));
        }).then(function (x) {
          var regFile = path.join(dbDir, 'Registration.json');
          return _bluebird2.default.all([fs.readJsonAsync(path.join(backupDir, 'db', 'Registration.json')), fs.readJsonAsync(regFile)]).then(function (_ref) {
            var _ref2 = _slicedToArray(_ref, 2);

            var bkupReg = _ref2[0];
            var currReg = _ref2[1];

            _lodash2.default.assign(currReg, _lodash2.default.pick(bkupReg, REG_FIELDS));
            return fs.writeJsonAsync(regFile, currReg);
          });
        });
      });
    }
  }]);

  return _class;
}();

exports.default = _class;
//# sourceMappingURL=checkin.js.map