'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _path = require('path');

var path = _interopRequireWildcard(_path);

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _exec_helper = require('./_exec_helper');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var fs = _bluebird2.default.promisifyAll(require('fs-extra'));
var tmp = _bluebird2.default.promisifyAll(require('tmp'));

var SERVICES = 'checkin vms listener'.split(' ');

var _class = function () {
  function _class(tmpDir) {
    _classCallCheck(this, _class);

    this.tmpDir = tmpDir;
  }

  _createClass(_class, [{
    key: 'backup',
    value: function backup(dataDir, s3Client, s3Bucket, s3Key) {
      var _this = this;

      return this._collect(dataDir).then(function (tmpDir) {
        return _this._pack(tmpDir);
      }).then(function (tarFile) {
        return _this._upload(tarFile, s3Client, s3Bucket, s3Key);
      }).then(function (x) {
        return s3Key;
      });
    }
  }, {
    key: 'restore',
    value: function restore(s3Client, s3Bucket, s3Key, dataDir, supervisorApi) {
      var _this2 = this;

      return this._download(s3Client, s3Bucket, s3Key).then(function (tarFile) {
        return _this2._unpack(tarFile);
      }).then(function (tmpDir) {
        return _this2._distribute(tmpDir, dataDir);
      }).then(function (x) {
        return _this2._restart(supervisorApi);
      });
    }
  }, {
    key: 'supervisorApi',
    value: function supervisorApi() {
      return {
        restartServices: function restartServices() {
          return _bluebird2.default.delay(100).then(function (x) {
            return (0, _exec_helper.execCheckAsync)('sh', ['/etc/init.d/SolinkConnect.sh', 'restart-services']);
          });
        }
      };
    }
  }, {
    key: '_collect',
    value: function _collect(dataDir) {
      return tmp.dirAsync({ prefix: 'ConnectBackup-', dir: this.tmpDir, unsafeCleanup: true }).then(function (tmpDir) {
        return _bluebird2.default.all(SERVICES.map(function (s) {
          return require('./service/' + s).default.backup(path.join(dataDir, s), path.join(tmpDir, s));
        })).then(function (x) {
          return tmpDir;
        });
      });
    }
  }, {
    key: '_pack',
    value: function _pack(tmpDir) {
      return tmp.tmpNameAsync({ dir: this.tmpDir }).then(function (tarFile) {
        return (0, _exec_helper.execCheckAsync)('tar', ['cjf', tarFile, '-C', tmpDir, '.']).then(function (x) {
          return tarFile;
        });
      });
    }
  }, {
    key: '_upload',
    value: function _upload(filePath, s3Client, s3Bucket, s3Key) {
      var rs = fs.createReadStream(filePath);
      return new _bluebird2.default(function (resolve, reject) {
        rs.on('open', function () {
          return resolve(rs);
        });
        rs.on("error", reject);
      }).then(function (fileStream) {
        return s3Client.putObject({
          Bucket: s3Bucket,
          Key: s3Key,
          Body: fileStream
        }).promise();
      });
    }
  }, {
    key: '_download',
    value: function _download(s3Client, s3Bucket, s3Key) {
      var _this3 = this;

      return new _bluebird2.default(function (resolve, reject) {
        var req = s3Client.getObject({
          Bucket: s3Bucket,
          Key: s3Key
        });
        var rs = req.createReadStream();

        req.on('success', function () {
          return resolve(rs);
        });
        rs.on('error', reject);
      }).then(function (rs) {
        return tmp.tmpNameAsync({ dir: _this3.tmpDir }).then(function (tmpFileName) {
          return new _bluebird2.default(function (resolve, reject) {
            var ws = fs.createWriteStream(tmpFileName);
            ws.on('open', function () {
              return resolve(ws);
            });
            ws.on('error', reject);
          }).then(function (ws) {
            rs.pipe(ws);
            return new _bluebird2.default(function (resolve, reject) {
              ws.removeAllListeners();
              ws.on('finish', resolve);
              ws.on('error', reject);
            });
          }).then(function (x) {
            return tmpFileName;
          });
        });
      });
    }
  }, {
    key: '_unpack',
    value: function _unpack(tarFile) {
      return tmp.dirAsync({ prefix: 'ConnectRestore-', dir: this.tmpDir, unsafeCleanup: true }).then(function (tmpDir) {
        return (0, _exec_helper.execCheckAsync)('tar', ['xjf', tarFile, '-C', tmpDir]).then(function (x) {
          return tmpDir;
        });
      });
    }
  }, {
    key: '_distribute',
    value: function _distribute(tmpDir, dataDir) {
      var transfer = function transfer(tmpDir, dstDir) {
        return fs.removeAsync(dstDir).then(function (x) {
          return fs.moveAsync(tmpDir, dstDir);
        });
      };
      return _bluebird2.default.all(SERVICES.map(function (s) {
        return transfer(path.join(tmpDir, s), path.join(dataDir, s, 'config.restore'));
      }));
    }
  }, {
    key: '_restart',
    value: function _restart(supervisorApi) {
      return supervisorApi.restartServices();
    }
  }]);

  return _class;
}();

exports.default = _class;
//# sourceMappingURL=API.js.map