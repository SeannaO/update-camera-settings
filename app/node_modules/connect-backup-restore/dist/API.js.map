{"version":3,"sources":["../src/API.js"],"names":[],"mappings":"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","file":"API.js","sourcesContent":["import * as path from 'path'\n\nimport Promise from 'bluebird'\nconst fs = Promise.promisifyAll(require('fs-extra'))\nconst tmp = Promise.promisifyAll(require('tmp'))\n\nimport { execCheckAsync } from './_exec_helper'\n\nconst SERVICES = 'checkin vms listener'.split(' ');\n\nexport default class {\n  constructor(tmpDir) {\n    this.tmpDir = tmpDir;\n  }\n  \n  backup(dataDir, s3Client, s3Bucket, s3Key) {\n    return this._collect(dataDir)\n    .then(tmpDir => this._pack(tmpDir))\n    .then(tarFile => this._upload(tarFile, s3Client, s3Bucket, s3Key))\n    .then(x => s3Key);\n  }\n  \n  restore(s3Client, s3Bucket, s3Key, dataDir, supervisorApi) {\n    return this._download(s3Client, s3Bucket, s3Key)\n    .then(tarFile => this._unpack(tarFile))\n    .then(tmpDir => this._distribute(tmpDir, dataDir))\n    .then(x => this._restart(supervisorApi));\n  }\n  \n  supervisorApi() {\n   return {\n      restartServices: function() {\n        return Promise.delay(100)\n        .then(x => execCheckAsync('sh', ['/etc/init.d/SolinkConnect.sh', 'restart-services']));\n      }\n    };\n  }\n  \n  _collect(dataDir) {\n    return tmp.dirAsync({ prefix: 'ConnectBackup-', dir: this.tmpDir, unsafeCleanup: true })\n    .then(tmpDir =>\n      Promise.all(\n        SERVICES.map(s => require('./service/' + s).default.backup(path.join(dataDir, s), path.join(tmpDir, s)))\n      )\n      .then(x => tmpDir)\n    );\n  }\n  \n  _pack(tmpDir) {\n    return tmp.tmpNameAsync({ dir: this.tmpDir })\n    .then(tarFile =>\n      execCheckAsync('tar', ['cjf', tarFile, '-C', tmpDir, '.'])\n      .then(x => tarFile)\n    );\n  }\n  \n  _upload(filePath, s3Client, s3Bucket, s3Key) {\n    let rs = fs.createReadStream(filePath);\n    return new Promise((resolve, reject) => {\n        rs.on('open', () => resolve(rs));\n        rs.on(\"error\", reject);\n    })\n    .then(fileStream => {\n      return s3Client.putObject({\n        Bucket: s3Bucket,\n        Key: s3Key,\n        Body: fileStream\n      })\n      .promise();\n    });\n  }\n  \n  _download(s3Client, s3Bucket, s3Key) {\n    return new Promise((resolve, reject) => {\n      let req = s3Client.getObject({\n        Bucket: s3Bucket,\n        Key: s3Key\n      });\n      let rs = req.createReadStream();\n      \n      req.on('success', () => resolve(rs));\n      rs.on('error', reject);\n    })\n    .then(rs =>\n      tmp.tmpNameAsync({ dir: this.tmpDir })\n      .then(tmpFileName =>\n        new Promise((resolve, reject) => {\n          let ws = fs.createWriteStream(tmpFileName);\n          ws.on('open', () => resolve(ws));\n          ws.on('error', reject);\n        })\n        .then(ws => {\n          rs.pipe(ws);\n          return new Promise((resolve, reject) => {\n            ws.removeAllListeners();\n            ws.on('finish', resolve);\n            ws.on('error', reject);\n          });\n        })\n        .then(x => tmpFileName)\n      )\n    );\n  }\n  \n  _unpack(tarFile) {\n    return tmp.dirAsync({ prefix: 'ConnectRestore-', dir: this.tmpDir, unsafeCleanup: true })\n    .then(tmpDir =>\n      execCheckAsync('tar', ['xjf', tarFile, '-C', tmpDir])\n      .then(x => tmpDir)\n    );\n  }\n  \n  _distribute(tmpDir, dataDir) {\n    const transfer = (tmpDir, dstDir) => fs.removeAsync(dstDir).then(x => fs.moveAsync(tmpDir, dstDir));\n    return Promise.all(\n      SERVICES.map(s => transfer(path.join(tmpDir, s), path.join(dataDir, s, 'config.restore')))\n    );\n  }\n  \n  _restart(supervisorApi) {\n    return supervisorApi.restartServices();\n  }\n}\n"]}